<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xsi:schemaLocation="http://www.springframework.org/schema/jee 
		http://www.springframework.org/schema/jee/spring-jee-4.2.xsd
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	
	<!--
		* JNDI를 이용한 DataSource 설정하기
		웹로직이나 JBoss와 같은 WAS(Web Application Server)를 사용할 경우
		JNDI를 이용해 DataSource를 설정할 경우가 많다. 물론 톰캣이나 제티(Jetty)
		등의 웹 컨테이너를 사용할 경우에도 JNDI를 통해 DataSource를 구할 수 있다.
		
		JNDI 방식의 커넥션 풀을 사용하기 위해서는 src/main/webapp/META-INF
		폴더에 커넥션 풀에 대한 설정 파일인 context.xml이 작성되어 있어야 한다.
		그리고 JNDI로부터 DataSource를 가져오려면 <jee:jndi-lookup> 태그를
		사용해 아래와 같이 JNDI에 등록된 커넥션 풀 이름으로 DataSource를 얻을 수 있다.
		 
	 <jee:jndi-lookup id="dataSource"
	 	jndi-name="jdbc/springDBPool" resource-ref="true" />

		위의 설정에서 jndi-name 속성은 JNDI에서 검색할 커넥션 풀의 이름을 지정하고
		resource-ref 속성에 true를 지정하게 되면 검색할 커넥션 풀의 이름 앞에
		java:comp/env를 붙여준다. 즉 java:comp/env/jdbc/springDBPool을
		사용해 JNDI에서 커넥션 풀을 검색하게 된다.
		이 <jee:jndi-lookup> 태그를 사용할 경우 내부적으로 스프링에서 제공하는 
		JndiObjectFactoryBean 클래스를 사용해 DataSource를 구하게 된다.
		
		JndiObjectFactoryBean을 직접 사용해 DataSource를 얻으려면 아래와 같이
		JndiObjectFactoryBean 클래스를 스프링 bean으로 설정하면 된다.
		
		JNDI 방식의 DBCP 설정은 아래와 같이 두 가지로 나눌 수 있다.
		
		1. 톰캣 서버의 context.xml 파일에 DBCP 설정
		  톰캣 서버의 context.xml 파일에 DBCP 정보를 설정하고 애플리케이션에서
		  JNDI를 이용하기 위해 web.xml 파일에 JNDI 객체를 참조하는 리소스 참조를
		  명시적으로 기술해야 한다.(서블릿 3.0 부터는 필수가 아닌 권장 사항임)
		  web.xml 파일에 JNDI 연결에 필요한 리소스 참조를 <web-app>루트 태그
		  아래에 다음과 같이 설정한다. <description>과 <res-type>은 생략할 수 있다.
		  
		<resource-ref>
    	  <description>DBCP Connection 정의</description>
    	  <res-ref-name>jdbc/springDBPool</res-ref-name>
    	  <res-type>javax.sql.DataSource</res-type>
    	  <res-auth>Container</res-auth>
  		</resource-ref> 
		  
		  SpringSTS의 Server에 등록한 톰캣의 context.xml에 설정해야 한다.
		  톰캣 서버의 context.xml 파일에 아래와 같이 DBCP 정보를 설정한다.
		  
		<Context>
	  	  <Resource name="jdbc/springDBPool" 
				auth="Container"
				type="javax.sql.DataSource"
				driverClassName="com.mysql.jdbc.Driver"
				url="jdbc:mysql://localhost:3306/springmvc?useSSL=true"
				username="root"
				password="12345678"			
				factory="org.apache.commons.dbcp2.BasicDataSourceFactory"
				maxActive="10" 
				maxIdle="5"
				closeMethod="close" />	
		</Context>

		2. 애플리케이션에서 별도의 context.xml 파일에 DBCP 설정
		  별도의 context.xml 파일에 DBCP 정보를 설정하고 프로젝트의 webapp 또는
		  WebContent 아래에 META-INF 폴더에 저장한다. 애플리케이션에서 JNDI를
		  이용하기 위해 web.xml에 JNDI 객체를 참조하는 리소스 참조를 명시적으로 
		  기술해야 한다.(서블릿 3.0 부터는 필수가 아닌 권장 사항임)
		  별도의 context.xml 파일은 톰캣 서버에 설정하는 것과 동일하게 작성하면 된다.
	 -->
	<bean id="dataSourceJndi"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/springDBPool" />
		<property name="resourceRef" value="true" />		
	</bean>		
</beans>
